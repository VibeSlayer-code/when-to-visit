{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vihaan\\\\Desktop\\\\When To Visit\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendPasswordResetEmail, onAuthStateChanged } from 'firebase/auth';\nimport { auth } from '../services/firebase';\n\n// This context handles all things authentication for the app.\n// It lets you sign up, log in, log out, and reset passwords anywhere in the app without passing props everywhere.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook so you can just call useAuth() to get all auth stuff\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n\n// This provider wraps the whole app and keeps track of auth state (who's logged in, etc.)\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null); // Stores the logged-in user (or null)\n  const [loading, setLoading] = useState(true); // True while we check if user is logged in\n\n  // Sign up with email and password\n  function signup(email, password) {\n    return createUserWithEmailAndPassword(auth, email, password);\n  }\n\n  // Log in with email and password\n  function login(email, password) {\n    return signInWithEmailAndPassword(auth, email, password);\n  }\n\n  // Log out the current user\n  function logout() {\n    return signOut(auth);\n  }\n\n  // Send a password reset email\n  function resetPassword(email) {\n    return sendPasswordResetEmail(auth, email);\n  }\n\n  // When the app loads, listen for auth state changes (login/logout)\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n    // Clean up the listener when component unmounts\n    return unsubscribe;\n  }, []);\n\n  // All the stuff we want to share with the rest of the app\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    resetPassword,\n    loading\n  };\n\n  // Provide the auth context to all children components\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","sendPasswordResetEmail","onAuthStateChanged","auth","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","signup","email","password","login","logout","resetPassword","unsubscribe","user","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Vihaan/Desktop/When To Visit/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { \n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  sendPasswordResetEmail,\n  onAuthStateChanged\n} from 'firebase/auth';\nimport { auth } from '../services/firebase';\n\n// This context handles all things authentication for the app.\n// It lets you sign up, log in, log out, and reset passwords anywhere in the app without passing props everywhere.\nconst AuthContext = createContext();\n\n// Custom hook so you can just call useAuth() to get all auth stuff\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\n// This provider wraps the whole app and keeps track of auth state (who's logged in, etc.)\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState(null); // Stores the logged-in user (or null)\n  const [loading, setLoading] = useState(true); // True while we check if user is logged in\n\n  // Sign up with email and password\n  function signup(email, password) {\n    return createUserWithEmailAndPassword(auth, email, password);\n  }\n\n  // Log in with email and password\n  function login(email, password) {\n    return signInWithEmailAndPassword(auth, email, password);\n  }\n\n  // Log out the current user\n  function logout() {\n    return signOut(auth);\n  }\n\n  // Send a password reset email\n  function resetPassword(email) {\n    return sendPasswordResetEmail(auth, email);\n  }\n\n  // When the app loads, listen for auth state changes (login/logout)\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n    // Clean up the listener when component unmounts\n    return unsubscribe;\n  }, []);\n\n  // All the stuff we want to share with the rest of the app\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    resetPassword,\n    loading\n  };\n\n  // Provide the auth context to all children components\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SACEC,8BAA8B,EAC9BC,0BAA0B,EAC1BC,OAAO,EACPC,sBAAsB,EACtBC,kBAAkB,QACb,eAAe;AACtB,SAASC,IAAI,QAAQ,sBAAsB;;AAE3C;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGZ,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,SAASa,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,OAAOb,UAAU,CAACW,WAAW,CAAC;AAChC;;AAEA;AAAAE,EAAA,CAJgBD,OAAO;AAKvB,OAAO,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACzC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9C;EACA,SAASoB,MAAMA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC/B,OAAOpB,8BAA8B,CAACK,IAAI,EAAEc,KAAK,EAAEC,QAAQ,CAAC;EAC9D;;EAEA;EACA,SAASC,KAAKA,CAACF,KAAK,EAAEC,QAAQ,EAAE;IAC9B,OAAOnB,0BAA0B,CAACI,IAAI,EAAEc,KAAK,EAAEC,QAAQ,CAAC;EAC1D;;EAEA;EACA,SAASE,MAAMA,CAAA,EAAG;IAChB,OAAOpB,OAAO,CAACG,IAAI,CAAC;EACtB;;EAEA;EACA,SAASkB,aAAaA,CAACJ,KAAK,EAAE;IAC5B,OAAOhB,sBAAsB,CAACE,IAAI,EAAEc,KAAK,CAAC;EAC5C;;EAEA;EACApB,SAAS,CAAC,MAAM;IACd,MAAMyB,WAAW,GAAGpB,kBAAkB,CAACC,IAAI,EAAGoB,IAAI,IAAK;MACrDV,cAAc,CAACU,IAAI,CAAC;MACpBR,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;IACF;IACA,OAAOO,WAAW;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,KAAK,GAAG;IACZZ,WAAW;IACXI,MAAM;IACNG,KAAK;IACLC,MAAM;IACNC,aAAa;IACbP;EACF,CAAC;;EAED;EACA,oBACET,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAd,QAAA,EAChCA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAAClB,GAAA,CAlDeF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}