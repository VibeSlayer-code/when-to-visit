{"ast":null,"code":"// Google Maps API Services\nconst API_KEY = 'YOUR_GOOGLE_MAPS_API_KEY'; // Replace with your actual API key\n\n// Get place details and coordinates from a search query\nexport const searchPlaces = async query => {\n  try {\n    // Note: For client-side requests, you'll need a proxy server or use Places Autocomplete widget\n    // This direct fetch won't work in browser due to CORS restrictions\n    const response = await fetch(`https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(query)}&key=${API_KEY}`, {\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data.results.map(place => {\n      var _place$photos, _place$photos$;\n      return {\n        placeId: place.place_id,\n        name: place.name,\n        address: place.formatted_address,\n        location: {\n          lat: place.geometry.location.lat,\n          lng: place.geometry.location.lng\n        },\n        types: place.types,\n        rating: place.rating,\n        userRatingsTotal: place.user_ratings_total,\n        photoReference: (_place$photos = place.photos) === null || _place$photos === void 0 ? void 0 : (_place$photos$ = _place$photos[0]) === null || _place$photos$ === void 0 ? void 0 : _place$photos$.photo_reference\n      };\n    });\n  } catch (error) {\n    console.error('Error searching places:', error);\n    throw error;\n  }\n};\n\n// Get place details from a place ID\nexport const getPlaceDetails = async placeId => {\n  try {\n    const response = await fetch(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_address,geometry,photos,rating,types,opening_hours&key=${API_KEY}`, {\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data.result;\n  } catch (error) {\n    console.error('Error getting place details:', error);\n    throw error;\n  }\n};\n\n// Get a static map image URL for a location\nexport const getStaticMapUrl = (lat, lng, zoom = 15, width = 400, height = 200) => {\n  return `https://maps.googleapis.com/maps/api/staticmap?center=${lat},${lng}&zoom=${zoom}&size=${width}x${height}&markers=color:red%7C${lat},${lng}&key=${API_KEY}`;\n};\n\n// Get directions between two points\nexport const getDirections = async (origin, destination, mode = 'driving') => {\n  try {\n    const response = await fetch(`https://maps.googleapis.com/maps/api/directions/json?origin=${encodeURIComponent(origin)}&destination=${encodeURIComponent(destination)}&mode=${mode}&key=${API_KEY}`, {\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error getting directions:', error);\n    throw error;\n  }\n};\n\n// Get nearby places of a specific type\nexport const getNearbyPlaces = async (lat, lng, radius = 1500, type = 'restaurant') => {\n  try {\n    const response = await fetch(`https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=${radius}&type=${type}&key=${API_KEY}`, {\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error getting nearby places:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_KEY","searchPlaces","query","response","fetch","encodeURIComponent","mode","ok","Error","data","json","results","map","place","_place$photos","_place$photos$","placeId","place_id","name","address","formatted_address","location","lat","geometry","lng","types","rating","userRatingsTotal","user_ratings_total","photoReference","photos","photo_reference","error","console","getPlaceDetails","result","getStaticMapUrl","zoom","width","height","getDirections","origin","destination","getNearbyPlaces","radius","type"],"sources":["C:/Users/Vihaan/Desktop/When To Visit/src/services/googleMapsService.js"],"sourcesContent":["// Google Maps API Services\nconst API_KEY = 'YOUR_GOOGLE_MAPS_API_KEY'; // Replace with your actual API key\n\n// Get place details and coordinates from a search query\nexport const searchPlaces = async (query) => {\n  try {\n    // Note: For client-side requests, you'll need a proxy server or use Places Autocomplete widget\n    // This direct fetch won't work in browser due to CORS restrictions\n    const response = await fetch(\n      `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(\n        query\n      )}&key=${API_KEY}`,\n      { mode: 'cors' }\n    );\n    \n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    \n    const data = await response.json();\n    return data.results.map(place => ({\n      placeId: place.place_id,\n      name: place.name,\n      address: place.formatted_address,\n      location: {\n        lat: place.geometry.location.lat,\n        lng: place.geometry.location.lng\n      },\n      types: place.types,\n      rating: place.rating,\n      userRatingsTotal: place.user_ratings_total,\n      photoReference: place.photos?.[0]?.photo_reference\n    }));\n  } catch (error) {\n    console.error('Error searching places:', error);\n    throw error;\n  }\n};\n\n// Get place details from a place ID\nexport const getPlaceDetails = async (placeId) => {\n  try {\n    const response = await fetch(\n      `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_address,geometry,photos,rating,types,opening_hours&key=${API_KEY}`,\n      { mode: 'cors' }\n    );\n    \n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    \n    const data = await response.json();\n    return data.result;\n  } catch (error) {\n    console.error('Error getting place details:', error);\n    throw error;\n  }\n};\n\n// Get a static map image URL for a location\nexport const getStaticMapUrl = (lat, lng, zoom = 15, width = 400, height = 200) => {\n  return `https://maps.googleapis.com/maps/api/staticmap?center=${lat},${lng}&zoom=${zoom}&size=${width}x${height}&markers=color:red%7C${lat},${lng}&key=${API_KEY}`;\n};\n\n// Get directions between two points\nexport const getDirections = async (origin, destination, mode = 'driving') => {\n  try {\n    const response = await fetch(\n      `https://maps.googleapis.com/maps/api/directions/json?origin=${encodeURIComponent(\n        origin\n      )}&destination=${encodeURIComponent(\n        destination\n      )}&mode=${mode}&key=${API_KEY}`,\n      { mode: 'cors' }\n    );\n    \n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error getting directions:', error);\n    throw error;\n  }\n};\n\n// Get nearby places of a specific type\nexport const getNearbyPlaces = async (lat, lng, radius = 1500, type = 'restaurant') => {\n  try {\n    const response = await fetch(\n      `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=${radius}&type=${type}&key=${API_KEY}`,\n      { mode: 'cors' }\n    );\n    \n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    \n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error getting nearby places:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}